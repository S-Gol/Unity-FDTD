#pragma kernel Elastic2DDifferentials
#pragma kernel FillPatternedNoise
#pragma kernel SetSourcePoint
#pragma kernel CopyBuffers
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct elasticMaterial
{      
	float vp, vs, rho, lam, mu;
};

RWTexture2D<float4> velTexture;

RWStructuredBuffer<float2> u1Buffer;
RWStructuredBuffer<float2> u2Buffer;
RWStructuredBuffer<float2> u3Buffer;

RWStructuredBuffer<int> matGridBuffer;
RWStructuredBuffer<elasticMaterial> matDataBuffer;

RWStructuredBuffer<int2> sourcePosBuffer;
RWStructuredBuffer<float2> sourceValBuffer;


RWStructuredBuffer<float> weightBuffer;

float co_dxx;
float co_dyy;
float co_dxy;

float dt;
float t;

int nx;
int nx2;
int ny;
int ny2;

float2 buffV(int3 id, RWStructuredBuffer<float2> buffer)
{
    int idx = id.x + 1 + nx2 * (id.y + 1);
    return buffer[idx];
}
elasticMaterial buffMat(uint3 id)
{
    int idx = id.x + 1 + nx2 * (id.y + 1);
    int matID = matGridBuffer[idx];
	return matDataBuffer[matID];
}

[numthreads(8,8,1)]
void Elastic2DDifferentials(int3 id : SV_DispatchThreadID)
{
	
	elasticMaterial material = buffMat(id);

	float lam = material.lam;
	float mu = material.mu;
	float lam_2mu = lam + 2 * mu;
	float dt2rho = dt * dt / material.rho;
	
    int idx = id.x + 1 + nx2 * (id.y + 1);
	
	
    //Central differencing
	float2 du_dxx = co_dxx * (buffV(id + int3(0, -1, 0), u2Buffer) - 2 * buffV(id + int3(0, 0, 0), u2Buffer) + buffV(id + int3(0, 1, 0), u2Buffer));
	float2 du_dyy = co_dyy * (buffV(id + int3(-1, 0, 0), u2Buffer) - 2 * buffV(id + int3(0, 0, 0), u2Buffer) + buffV(id + int3(1, 0, 0), u2Buffer));
    float2 du_dxy = co_dxy * (buffV(id + int3(1, -1, 0), u2Buffer) - buffV(id + int3(1, 1, 0), u2Buffer) - buffV(id + int3(-1, -1, 0), u2Buffer) + buffV(id + int3(-1, 1, 0), u2Buffer));

	//stress from velocity derivatives
    float2 stress;
    stress.x = lam_2mu * du_dxx.x + lam * du_dxy.y + mu * (du_dyy.x + du_dxy.y);
    stress.y = mu * (du_dxy.x + du_dxx.y) + lam * du_dxy.x + lam_2mu * du_dyy.y;

	//New velocity from stresses 
    //U(t) = 2 * U(t - 1) - U(t - 2) + G dt2 / rho
	u3Buffer[idx] = 2.0 * buffV(id, u2Buffer) - buffV(id, u1Buffer) + stress * dt2rho;
	
    velTexture[id.xy] = float4(u3Buffer[idx].x, u3Buffer[idx].y, 0, 1);

}

[numthreads(8, 8, 1)]
void FillPatternedNoise(uint3 id : SV_DispatchThreadID)
{
	int idx = id.x + nx2 * id.y;
	u3Buffer[idx] = float2(id.x & id.y, (id.x & 15) / 15.0);
}

[numthreads(8, 1, 1)]
void SetSourcePoint(uint3 id : SV_DispatchThreadID)
{
    int2 sPoint = sourcePosBuffer[id.x];
    uint idx = (sPoint.x + nx2 * sPoint.y);
    u3Buffer[idx] += sourceValBuffer[id.x]*1e3;
}


[numthreads(8, 8, 1)]
void CopyBuffers(uint3 id : SV_DispatchThreadID)
{
    int idx = id.x + 1 + nx2 * (id.y + 1);
	
    u2Buffer[idx] = u3Buffer[idx] * weightBuffer[idx];
    u1Buffer[idx] = u2Buffer[idx] * weightBuffer[idx];
}