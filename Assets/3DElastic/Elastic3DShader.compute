#pragma kernel Elastic3DDifferentials
#pragma kernel SetSourcePoint
#pragma kernel CopyBuffers
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct elasticMaterial
{
    float vp, vs, rho, lam, mu;
};

uint3 to3d(uint idx, uint xSize, uint ySize, uint zSize)
{
    uint z = idx / (xSize * ySize);
    uint newIdx = idx - (z * xSize * ySize);
    uint y = newIdx / xSize;
    uint x = newIdx % xSize;
    return uint3(x, y, z);
}



RWStructuredBuffer<float3> u1Buffer;
RWStructuredBuffer<float3> u2Buffer;
RWStructuredBuffer<float3> u3Buffer;

RWStructuredBuffer<int> matGridBuffer;
RWStructuredBuffer<elasticMaterial> matDataBuffer;

RWStructuredBuffer<int3> sourcePosBuffer;
RWStructuredBuffer<float3> sourceValBuffer;

RWStructuredBuffer<float> weightBuffer;

float co_dx;
float co_dy;
float co_dz;

float dt;
float t;

uint nx;
uint nx2;
uint ny;
uint ny2;
uint nz;
uint nz2;
uint IDOffset;

int to1d(uint x, uint y, uint z)
{
    return (z * nx2 * ny2) + (y * nx2) + x;
}



[numthreads(256, 1, 1)]
void Elastic3DDifferentials(int3 id : SV_DispatchThreadID)
{
    
    
    uint3 pos = to3d(id.x + IDOffset, nx2, ny2, nz2) + uint3(1, 1, 1);
    uint index = to1d(pos.x+1, pos.y+1, pos.z+1);
    
    bool inBounds = !(pos.x >= nx2 - 1 || pos.x <= 1 || pos.y >= ny2 - 1 || pos.y <= 1 || pos.z >= nz2 - 1 || pos.z <= 1);

    
    elasticMaterial material = matDataBuffer[matGridBuffer[index]];

    float lam = material.lam;
    float mu = material.mu;
    float lam_2mu = lam + 2.0 * mu;
    float dt2rho = dt * dt / material.rho;

    float lam_mu = lam + mu;
    
    uint xOffset = 1;
    uint yOffset = nx2;
    uint zOffset = nx2 * ny2;
	
	
    //Central differencing 
    float3 du_dxx = 4*co_dx * co_dx * (u2Buffer[index + xOffset] - 2 * u2Buffer[index] + u2Buffer[index - xOffset]);
    float3 du_dyy = 4*co_dy * co_dy * (u2Buffer[index + yOffset] - 2 * u2Buffer[index] + u2Buffer[index - yOffset]);
    float3 du_dzz = 4*co_dz * co_dz * (u2Buffer[index + zOffset] - 2 * u2Buffer[index] + u2Buffer[index - zOffset]);
    
    // +1,+1 - +1,-1 - -1,+1 + -1,-1  

    float3 du_dxz = co_dx * co_dz * (u2Buffer[index + xOffset + zOffset] - u2Buffer[index + xOffset - zOffset] - u2Buffer[index - xOffset + zOffset] + u2Buffer[index - xOffset - zOffset]);
    float3 du_dyz = co_dy * co_dz * (u2Buffer[index + yOffset + zOffset] - u2Buffer[index + yOffset - zOffset] - u2Buffer[index - yOffset + zOffset] + u2Buffer[index - yOffset - zOffset]);
    float3 du_dxy = co_dx * co_dy * (u2Buffer[index + xOffset + yOffset] - u2Buffer[index + xOffset - yOffset] - u2Buffer[index - xOffset + yOffset] + u2Buffer[index - xOffset - yOffset]);

	//stress from velocity derivatives  
    float3 stress;

    stress.x = lam_2mu * du_dxx.x + mu * du_dyy.x + mu * du_dzz.x + lam_mu * du_dxz.z + lam_mu * du_dxy.y;
    stress.y = mu * du_dxx.y + lam_2mu * du_dyy.y + mu * du_dzz.y + lam_mu * du_dyz.z + lam_mu * du_dxy.x;
    stress.z = mu * du_dxx.z + mu * du_dyy.z + lam_2mu * du_dzz.z + lam_mu * du_dyz.y + lam_mu * du_dxz.x;

	//New velocity from stresses 
    //U(t) = 2 * U(t - 1) - U(t - 2) + G dt2 / rho
    u3Buffer[index] = (2.0 * u2Buffer[index] - u1Buffer[index] + stress * dt2rho) * inBounds;

}

[numthreads(8, 1, 1)]
void SetSourcePoint(uint3 id : SV_DispatchThreadID)
{
    int3 sPoint = sourcePosBuffer[id.x];
    uint idx = to1d(sPoint.x, sPoint.y, sPoint.z);
    u3Buffer[idx] += sourceValBuffer[id.x];
}


[numthreads(256, 1, 1)]
void CopyBuffers(uint3 id : SV_DispatchThreadID)
{
    int3 pos = to3d(id.x + IDOffset, nx2, ny2, nz2);
    int index = to1d(pos.x +1, pos.y +1, pos.z+1);
    
    u1Buffer[index] = u2Buffer[index] * weightBuffer[index];
    u2Buffer[index] = u3Buffer[index] * weightBuffer[index];
}